{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ursula","text":"<p>\u201cA writer is a person who cares what words mean, what they say, how they say it. Writers know words are their way towards truth and freedom, and so they use them with care, with thought, with fear, with delight. By using words well they strengthen their souls. Story-tellers and poets spend their lives learning that skill and art of using words well. And their words make the souls of their readers stronger, brighter, deeper.\u201d \u2015 Ursula K. Le Guin</p> Version Status Documentation Compatibility Stats"},{"location":"#what-is-ursula","title":"What is ursula?","text":"<p><code>ursula</code> is an easy-to-use <code>cookiecutter</code> template for academic markdown writing projects that may include code. To see an example repository using this template, check out <code>ursula_demo</code>. The primary goal of <code>ursula</code> is to store all of your materials for a project (writing, code, presentations, data, images, media, etc.) in one organized location. Any given project need not use all of the features and aspects of <code>ursula</code>, but they are always there in case a project expands or changes direction.</p> <p>Out of the box, <code>ursula</code> is designed for projects that:</p> <ul> <li>Write scholarship and make slides using      (any flavor, including )</li> <li>Plan to host your project on </li> <li>May include  code<sup>1</sup></li> <li>Want replication and/or usage documentation automatically created using    with the  theme   on </li> </ul>"},{"location":"#why-use-ursula","title":"Why use ursula?","text":"<p><code>ursula</code> is built on top of my generic <code>Python</code> template:  <code>snickerdoodle</code>. You can read the <code>readme</code> for that template to understand its advantages versus other templates. What <code>ursula</code> adds is support for academic writing projects. This may include articles or books. Presentation slides and notes are also stored and can use the same resources (images, tables, graphs, etc.) as the publication.</p>"},{"location":"#tools","title":"Tools","text":"<p>If you include <code>Python</code> code in your project, <code>ursula</code> includes these modern, stable tools for package construction and management that do not require any external services or costs:</p> <ul> <li>Dependency management:  and </li> <li>Testing: </li> <li>CI/CD: </li> <li>Code style:   ,   ,   and </li> </ul>"},{"location":"#options","title":"Options","text":"<p>In addition to the included tools above, <code>ursula</code> includes several options in the <code>cookiecutter</code> questionnaire that can be automatically applied as part of the templating process:</p> <ul> <li>Badge style: ,   ,   ,   ,  or </li> <li>Push an initial commit to GitHub</li> <li>Build and deploy basic documentation to GitHub Pages</li> <li>Create a <code>Python</code> virtual environment in the repository's \".venv\" Folder</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#setup","title":"Setup","text":"<p>If you are new to <code>cookiecutter</code> or simply want to guarantee that the created repository works as intended, follow the instructions in the <code>ursula</code> tutorial.</p> <p>If you are familiar with <code>cookiecutter</code> templates, you can go about the normal construction process. However, if you do not select the optional automatic setup features in the questionnaire, you should follow the instructions for manually setting up your virtual environment and deploying your documentation in the <code>ursula</code> tutorial. It is especially important to follow the document deployment process for your initial deployment - after that GitHub Actions will automatically update and redeploy the documentation (and you need not use the manual process again).</p>"},{"location":"#usage","title":"Usage","text":"<p>After your repository is created, you can start coding right away. Every push to GitHub will run any tests in the \"tests\" folder, deploy documentation to GitHub Pages, and apply <code>ruff</code> for linting and formatting. For more information about the following topics, just click on the corresponding hyperlink.</p> <ul> <li>Formatting and Linting</li> <li>GitHub Actions</li> <li>Publishing</li> <li>Repository Layout</li> <li>Versioning</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributors are always welcome and should find <code>ursula</code> easy to work with. The template is highly documented so that users and developers can adapt or extend<code>ursula</code> to work with their projects. So, forking and creating different template spins is encouraged. If you want to contribute directly to the project, feel free to grab an issue to work on or make a suggested improvement. If you wish to contribute, please read the Contribution Guide and Code of Conduct.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>These are other <code>cookiecutter</code> templates using <code>pdm</code> as their dependency manager:</p> <ul> <li>cookiecutter-docker-python-pdm: uses Docker and <code>black</code>.</li> <li>cookie: uses <code>mkdocs</code> and GitHub Actions, but also adds <code>conda</code>, <code>nox</code>, <code>black</code>, and <code>pyright</code>.</li> </ul> <p>If you are interested in going beyond <code>cookiecutter</code> (or its forks), <code>copier</code> is a powerful, newer templating package and there is a great template that incorporates several of the tools used in <code>ursula</code>:</p> <ul> <li>copier-pdm: includes, among other  tools, <code>pdm</code>,   <code>mkdocs</code>, and <code>ruff</code>.</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>I'd also like to extend a special thanks to pawamoy whose excellent <code>pdm</code> and <code>mkdocs</code> extensions and utlities are incorporated into <code>ursula</code>. Some of the scripts, documentation, configuration files, and other CI code were all adapted from pawamoy's repositories.</p> <p>I would also like to thank the University of Kansas School of Law for tolerating and supporting this law professor's coding efforts, an endeavor which is well outside the typical scholarly activities in the discipline.</p>"},{"location":"#license","title":"License","text":"<ol> <li> <p>Contributions to add support for other programming languages are welcome.\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced/","title":"Advanced User Guide","text":""},{"location":"advanced/#configuration-file","title":"Configuration File","text":"<p>If you use <code>cookiecutter</code> a lot (or plan to do so), I suggest creating a configuration file with some answers to the questionnaire. For example, I have included a basic configuration file in this repository: <code>cc_config.yaml</code>. You can then use the configuration file (which you should probably put in the parent folder for your code repositories) when you call <code>cookiecutter</code> as follows:</p> <pre><code>cookiecutter gh:WithPrecedent/ursula --config-file cc_config.yaml\n</code></pre>"},{"location":"advanced/#core-components","title":"Core Components","text":"<p>These are the tools that <code>ursula</code> incorporates and a brief explanation as to why they were chosen:</p> <ul> <li><code>pdm</code>: Although <code>poetry</code> is more popular, its syntax is not compliant with PEP 621 and  PEP 631. I was a long-time <code>poetry</code> user, but eventually ran into some packages and libraries (particularly <code>mkdocs</code> extensions) that would not properly install because of <code>poetry</code>'s non-standard <code>pyproject.toml</code> formatting. <code>pdm</code> is not yet as polished as <code>poetry</code>, but it is rock-solid and I have never run into dependency installation issues with it.</li> <li><code>mkdocs</code>: Similarly, <code>sphinx</code> is the dominant documentation package, but it is not nearly as easy to use as <code>mkdocs</code>, which allows all of your documentation to be created in Markdown and is beautiful out-of-the-box when using the Material Theme. I chose to prioritize accessibility so that you do not waste time trying to properly format and design your documentation.</li> <li><code>ruff</code>: A relatively new player in formatting, it aims to serve as a one-stop, extremely fast (it's written in <code>Rust</code>) formatting and linting package. <code>ursula</code> implements some reasonable defaults while still allowing user flexibility (i.e., it does not implement <code>black</code>). By default, the template activates the parts of <code>ruff</code> that incorporate, among other packages: <code>Flake8</code>, <code>Bandit</code>, <code>pydocstyle</code>, and <code>pylint</code>.</li> <li>Github Actions: If you store your package on Github, which <code>ursula</code> assumes, there are strong reasons to prefer Github Actions as your CI/CD tool. <code>ursula</code> includes workflows for updating, releasing, and publishing your package while also deploying the accompanying documentation.</li> <li>GitHub Pages: There is a lot to be said for Read the Docs as a documentation host site. However, <code>mkdocs</code> works better on GitHub Pages and once you start using GitHub Actions, the automatic updating advantage of Read the Docs disappears. I also like that GitHub Pages is not dependent on ads placed on documentation pages for its survival. This was a close call and I might consider adding a Read the Docs option in a future version of <code>ursula</code>.</li> </ul>"},{"location":"advanced/#formatting-and-linting","title":"Formatting and Linting","text":"<p>All of the formatting and linting options of the created project are implemented through <code>ruff</code> and are incorporated into the created project's <code>pyproject.toml</code> file. So, you can adjust any <code>ruff</code> rules there. I have included comments in the <code>pyproject.toml</code> file for rules that are excluded and packages that are included so that you know which rules are enforced. <code>ruff</code> is automatically run with each GitHub push.</p> <p>Tip</p> <p>To automatically fix problems identified by <code>ruff</code>, you should use <code>pre-commit</code>. A <code>pre-commit</code> configuration file (<code>.pre-commit-config.yaml</code>) is included in the created repository.  By default, the <code>pre-commit</code> command will run <code>ruff</code> with the <code>fix</code> option invoked, which will try to correct all of the problems that it can. To use <code>pre-commit</code>, follow its user guide. If you activate <code>pre-commit</code>, it will then be automatically run on every push to GitHub.</p>"},{"location":"advanced/#github-actions","title":"GitHub Actions","text":"<p>These are the available actions for a repository created by <code>ursula</code> that are located in the \".github\" folder and on the GitHub repository page under \"Actions\":</p> GitHub Action Trigger Jobs <code>ci</code> automatically on push builds repo, runs tests, lints, formats, builds docs, and deploys docs <code>build</code> another Action builds repo <code>document</code> another Action or manually on GitHub builds and deploys docs <code>lint</code> another Action or manually on GitHub lints repository with <code>ruff</code> <code>merge</code> another Action or manually on GitHub merges <code>development</code> branch into <code>main</code> (currently untested Action) <code>publish</code> another Action or manually on GitHub publishes repository on PyPI (must configure PyPI to accept as trusted publisher) <p>Tip</p> <p>To run an Action (other than <code>ci.yml</code>) on GitHub, go to your repository, click \"Actions\" and select one of the Actions listed on the left side of the screen.</p>"},{"location":"advanced/#publishing","title":"Publishing","text":"<p><code>ursula</code> tries to make publishing your repository as simple as possible. Out-of-the-box, it provides tools to publish a release on GitHub and PyPI.</p> on GitHubon PyPI <p>To post a release on GitHub, you just need to push a commit with a message that begins with the letter \"v\" followed by the version in semantic form (e.g. \"v0.1.2\"). That will trigger a job in the <code>ci.yml</code> Action which automatically publishes a release, using the CHANGELOG.md for any changes made since the last release.</p> <p>The best way to publish a release on PyPI is to make the <code>ci.yml</code> Action a trusted publisher. If you do that, you can just run the <code>publish</code> GitHub Action (which can be activated directly from your GitHub repository's Actions page). Otherwise, you should use the <code>pdm publish</code> command from the command line while in the repository's root folder.</p>"},{"location":"advanced/#repository-layout","title":"Repository Layout","text":"<p>Consistent with best practices, <code>ursula</code> uses the \"src layout\" structure for the created repository. In the diagram below, the files and folders that you will ordinarily modify are commented.</p> <pre><code>\u251c\u2500\u2500 CHANGELOG.md              # Main changelog to record changes\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 advanced.md           # Add core documentation beyond the tutorial\n\u2502   \u251c\u2500\u2500 changelog.md\n\u2502   \u251c\u2500\u2500 code_of_conduct.md\n\u2502   \u251c\u2500\u2500 contributing.md\n\u2502   \u251c\u2500\u2500 credits.md\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u251c\u2500\u2500 material.css\n\u2502   \u2502   \u2514\u2500\u2500 mkdocstrings.css\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 license.md\n\u2502   \u251c\u2500\u2500 recipes.md            # Add examples and recipes\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u251c\u2500\u2500 gen_credits.py\n\u2502   \u2502   \u2514\u2500\u2500 gen_ref_nav.py\n\u2502   \u2514\u2500\u2500 tutorial.md           # Add basic tutorial\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml                # Change documentation structure\n\u251c\u2500\u2500 pyproject.toml            # Add dependencies or project metadata\n\u251c\u2500\u2500 README.md                 # This will also be the docs landing page\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 {repository name}     # Add Python modules\n\u2502       \u2514\u2500\u2500 __init__.py       # Update import info and version \n\u2514\u2500\u2500 tests                     # Add other test files\n    \u2514\u2500\u2500 test_main.py          # Follow the 'test_NAME' convention\n</code></pre>"},{"location":"advanced/#versioning","title":"Versioning","text":"<p>When you publish a new version, you should first manually adjust the version in the created repository's <code>__init__.py</code> file. It will then be automatically adjusted in <code>pyproject.toml</code> as well. <code>ursula</code> does not use automatic semantic versioning because the process thinks so many minor updates are \"major\" and you will find yourself on version 12.0.0 and still in alpha or beta. And, while calendar versioning has a lot in its favor, it is alien and confusing to users unfamiliar with it.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Initial commit</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting any of the following people:</p> <ul> <li>Corey Rayburn Yung (coreyrayburnyung@gmail.com)</li> </ul> <p>All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Every little bit helps, and credit will always be given. Environment Setup</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Follow this basic process:</p> <ol> <li>Fork and clone the repositor.</li> <li>Create a new branch: <code>git checkout -b feature-or-bugfix-name</code>.</li> <li>Edit the code.</li> <li>If you added functionality or features, update the documentation accordingly.</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This package follows the Google Python Style Guide with two notable exceptions:</p> <ol> <li>It always adds spaces around \"=\". This not only violates the Google guide, it violates PEP8, the foundational Python style guide from which all other resources are derived. I defy this strong, long-standign norm because I find it more readable. My brain and eyes have trouble seeing two separate objects when an equal sign is in the middle. I imagine that I am not alone in this accessibility issue. Further, as PEP8 itself notes, required spaces around equal signs are becoming increasing common with type annotations becoming part of best practices (and, as a result, signatures to classes, functions, and methods regularly include spaces around the equal signs). I realize that this will seem alien to many coders, but it is far easier on my eyes.</li> <li>I use some so-called \"power features\", primarily dunder methods, to make my interfaces easier to access and use. This is disfavored in the Google Python Style Guide because such code is often more difficult for others to read. To address that concern, I try to document and comment as to what the code is doing whenever I used any of the \"power features\" of Python.</li> </ol>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build ursula. Thank you!</p> <p><code>python</code> | <code>pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>astunparse</code> An AST unparser for Python <code>&gt;=1.6; python_version &lt; \"3.9\"</code> <code>1.6.3</code> ? <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.15.0</code> BSD-3-Clause <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.6.2</code> MPL-2.0 <code>cfgv</code> Validate configuration and produce human readable error messages. <code>&gt;=2.0.0</code> <code>3.4.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>&gt;= 7.2.7</code> <code>7.5.3</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>distlib</code> Distribution utilities <code>&lt;1,&gt;=0.3.7</code> <code>0.3.8</code> PSF-2.0 <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.1</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT License <code>filelock</code> A platform independent file lock. <code>&lt;4,&gt;=3.12.2</code> <code>3.14.0</code> The Unlicense (Unlicense) <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.44</code> <code>0.45.2</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>identify</code> File identification library for Python <code>&gt;=1.0.0</code> <code>2.5.36</code> MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.7</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.4; python_version &lt; \"3.10\"</code> <code>7.1.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.4</code> BSD License <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.6</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;= 0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;= 1.6.0</code> <code>1.8.3</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>2.1.5</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;= 1.5.2</code> <code>1.6.0</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;= 1.0.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;= 0.5.0</code> <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;= 1.1.2</code> <code>2.3.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;= 0.6.0</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;= 9.1.2</code> <code>9.5.25</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;= 0.7.1</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python] &gt;= 0.22.0</code> <code>0.25.1</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.10.3</code> ISC <code>nodeenv</code> Node.js virtual environment builder <code>&gt;=0.11.1</code> <code>1.9.0</code> BSD <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>24.0</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.2.2</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=1.5</code> <code>1.5.0</code> MIT <code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks. <code>&gt;= 3.3.3</code> <code>3.5.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.8.1</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;= 7.4.0</code> <code>8.2.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;= 4.1.0</code> <code>5.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;= 3.13.0</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;= 3.3.1</code> <code>3.6.1</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2024.1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.5.15</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.32.3</code> Apache-2.0 <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;= 0.0.286</code> <code>0.4.7</code> MIT <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;= 0.10.2</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>; python_full_version &lt;= \"3.11.0a6\"</code> <code>2.0.1</code> ? <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.2.1</code> MIT License <code>virtualenv</code> Virtual Python Environment builder <code>&gt;=20.10.0</code> <code>20.26.2</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>4.0.1</code> Apache-2.0 <code>wheel</code> A built-package format for Python <code>&lt;1.0,&gt;=0.23.0</code> <code>0.43.0</code> ? <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.19.1</code> ?"},{"location":"license/","title":"License","text":"<p>Apache Software License 2.0</p> <p>Copyright \u00a9 2023, Corey Rayburn Yung</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#requirements","title":"Requirements","text":"<p>To use <code>ursula</code> and the repository that it creates, you just need:</p> <ul> <li><code>python</code> 3.8 or later</li> <li><code>git</code></li> <li><code>cookiecutter</code>,   <code>cruft</code>, or   <code>cookieninja</code></li> <li><code>pdm</code></li> <li>A GitHub account</li> </ul> <p>Tip</p> <p>To take advantage of the automatic initial commit to GitHub, you should also store your Git credentials on your computer.</p>"},{"location":"tutorial/#create-remote-repository","title":"Create Remote Repository","text":"<p>Go to your GitHub Repositories page and click \"+\". The name of the new repository must be the same as the \"repo_name\" you will use in answering the <code>cookiecutter</code> questionnaire.</p>"},{"location":"tutorial/#create-local-repository","title":"Create Local Repository","text":"<p>In the parent folder of where you want your new repository, you can use <code>cookiecutter</code> (or <code>cruft</code> or <code>cookieninja</code>) to access the <code>ursula</code> template either directly from GitHub or by cloning it on your computer.</p> from GitHubfrom local source <pre><code>cookiecutter gh:WithPrecedent/ursula\n</code></pre> <pre><code># Go to folder where your cookiecutter templates are stored locally.\ngit clone git@github.com:WithPrecedent/ursula.git\n# Go to folder where your code repostiories are stored locally.\ncookiecutter ursula\n</code></pre>"},{"location":"tutorial/#answer-questionnaire","title":"Answer Questionnaire","text":"<p>As with any <code>cookiecutter</code>, project generation requires you to input information in what is referred to as the \"questionnaire.\" <code>ursula</code> attempts to make this process quick, easy, and painless. The default options, often created from your previous answers, are sensible so that you can just hit \"return\" in reponse to many requests. Or, if you prefer, as explained in the advanced guide, you can create a configuration file with many or all of your answers.</p> <p>These are the variable for which information will be requested, how your answers will be used, the default value (if any), and any limitations on your answer:</p> Variable Use Default Limitations <code>project_name</code> project title on README and docs None alphanumeric <code>package_name</code> project title on PyPI.org <code>project_name</code> with spaces and underscores changed to dashes alphanumeric with no spaces or underscores <code>repo_name</code> project title on GitHub <code>project_name</code> with spaces and dashes changed to underscores alphanumeric with no spaces or dashes <code>author_name</code> in <code>pyproject.toml</code> and docs None alphanumeric <code>author_email</code> in <code>pyproject.toml</code> None alphanumeric <code>github_user</code> to infer URL and in <code>pyproject.toml</code> None alphanumeric <code>description</code> to infer URL and in <code>pyproject.toml</code> None alphanumeric <code>version</code> in <code>__init__.py</code> for project \"0.1.0\" any valid version format <code>url</code> in <code>pyproject.toml</code> formed from <code>github_user</code> and <code>repo_name</code> any valid GitHub url <code>license</code> content of the constructed LICENSE file and in <code>pyproject.toml</code> Apache 2.0 Apache 2.0, BSD, ISC, GNU General Public v3, MIT, Other <code>badge_style</code> badges in README and docs , , , ,  <code>commit_to_github</code> whether to make an initial commit to GitHub \"n\" (no commit) Must have GitHub credentials stored <code>create_virtual_environment</code> whether to create a virtual environment in \".venv\" folder \"n\" (no environment created) Must have <code>pdm</code> installed"},{"location":"tutorial/#connect-remote-and-local-repositories","title":"Connect Remote and Local Repositories","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>commit_to_github</code> in the questionnaire.</p> <p>Enter the folder that you just created (which should be the <code>repo_name</code>) and initialize git as followa:</p> <pre><code># If your shell does not use \"cd\" to change directory, substitute the\n# appropriate command.\ncd {repo_name}\ngit init\ngit add .\n# You can change the message in the last command to whatever you like\ngit commit -m  \"Initial commit\"\ngit remote add origin {url of your new repository}.git\n# Depending on your default branch name, the last parameter might be \"master\"\n# or whatever you have set it to. If you use an IDE that has stored your\n# GitHub credentials, you might find it easier to use the IDE for pushing your\n# repository instead of the command line.\ngit push -u origin main\n</code></pre> <p>Your first commit with the new repository should now be visible on GitHub.</p>"},{"location":"tutorial/#create-virtual-environment","title":"Create Virtual Environment","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>create_virtual_environment</code> in the questionnaire.</p> <p>To create an environment with all of your dependencies (including development dependencies), enter the following in the repository folder.</p> <pre><code>pdm install\npdm use -f .venv\n</code></pre> <p>Any time you update your dependencies, you should rerun <code>pdm install</code>. But, you do not need to enter <code>pdm use</code>, unless you have a particular need within the environment.</p>"},{"location":"tutorial/#deploy-documentation","title":"Deploy Documentation","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>commit_to_github</code> and <code>create_virtual_environment</code> in the questionnaire.</p> <p>Unlike <code>poetry</code>, <code>pdm</code> does not use a shell. Instead, after you have created a virtual environment, enter the following commands to deploy your documentation.</p> <pre><code>pdm run mkdocs build\n# If you use an IDE that has stored your GitHub credentials, you might find\n# it easier to use the IDE for deploying your docs instead of the command\n# line.\npdm run mkdocs gh-deploy --force --clean\n</code></pre> <p>It's essential to run these commands once so that the documentation branch is created. Afterwards, the documentation for the repository will be automatically updated with every push to GitHub.</p>"}]}